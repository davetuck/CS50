The goal is to not learn a specific language through this class, but instead that you've learned how to program.
> unfortunately with a more traditional language, there's more distraction.

Human language is more complex and involves more syntax than computer language.
  However
Computer language requires you to be more precise.  Code ultimately needs to be correct (which goes without saying).

It's hard to become comfortable with the DESIGN of your code.

Integrated Develop Environments (IDEs): aka text editors.
> these are tools that programmers use to write code (VS Code).

GUI: Graphical User Interface (basically the left side bar of VS code)

CLI: Command Line Interface (terminal) this is what we will mostly be dealing with.
  $ make *filename* = compiling.  You have to do this before the output will be correct.  Compiling is the process of taking in source code and putting out machine code (binary).
  $ ./file (this pulls up any file in your current folder)
  $ rm = remove file (this removes the file named 'file')
  $ ls = list (this lists all the files in your current folder, if you never want to use GUI)

SCRATCH: (hello, world) from scratch is 
C: printf("hello, world"); in C
  > C must have double quotes, not single

SCRATCH: ask (What's your name) and wait; has an 'answer' bubble that writes in whatever the user inputs to the prompt
C: string answer = get_string("What's your name? ");
           üëÜüèº this is the assignment operator, which means to store a value in a variable.  You read these right to left.  The value on the right is copied in to the value on the left.
  > labeling it 'string' is telling the computer this is words
  > 'int' would tell the computer this is numbers

\n is a way of creating a new line so the C program compiler doesn't print $... on the end of your program.
  > / is an escape sequence
  > n is for a new line

%s is a format code which serves as a placeholder.

arguments and parameters are synonymous: they are inputs to a function.

SCRATCH: when (green flag) clicked
C: 
  #include <stdio.h>  üëàüèº this is the library you've loaded, aka a Header File.  It's a menu of all the available funtions.
  #include <cs50.h>

  int main(void)
  {
    printf("Hello, world\n");
  }

cd : change directory
  cd .. : change to parent folder
  cd ../.. : change to grandparent folder
cp : copy
code filename.c : create a new file
ls : list the items in the directory
mkdir : make directory, aka create a new file
mv : move, or rename
rm : remove 
rmdir : remove directory, aka remove a file
./ : access the folder that's right here in this directory

ctrl-L is the same as 'clear' in terminal.

bool : true/false
char : single character
double : more numbers after the decimal point, something that is more precision
float : real number (something with a decimal point in it)
int : integer (numbers)
long : bigger integer
string : words

CS50 library:
get_char
get_double
get_float
get_int
get_long
get_string

Format Codes: (placeholders)
%c : char
%f : float or double
%i : integer
%li : long integer
%s : string

Operators:
+ : add
- : subtract
* : multiply
/ : divide 
% : remainder operator 

Variables & Syntactic Sugar (ss):
  >Syntactic Sugar : makes it easier to write fewer characters, but express your thoughts the same.

  int counter = 0; (scratch: set counter to 0)
  counter = counter + 1; (scratch: change counter by 1)
    > ss: counter += 1;
    > further ss: counter++; (can only do this with 1)

First argument in printf HAS TO BE A STRING.

With string, int, flow, char, use a finite number of bits.  With 32 bits you can count pretty high.
  > 8 bits you can count as high as 256
  > 32 bits gives you roughly 4 billion, which is the standard for mac and pc.
  > using Long Integers (long, get_long, %li) gets you 64 bits which is still finite but much larger.

Typically if something is wrapped with parenthesis, it's a function.  There are exceptions:
  > The word "if" is not a function, it's a programming construct or feature of the C languages that uses parenthesis for a boolean expression (x > y)

const tells the compiler that you can't change a variable.  It's common to capitalize const variables.
  > Ex: cost int MINE = 2;

If you find yourself copying and pasting code, there's a good chance you're probably doing something wrong.

When asking the OR "||", you have to ask the same question on either side of it.

Single quotes '' are used for single characters in char.  
Double quotes "" are used for strings in str, even if there's only one character in the string but more applicable for entire words or multiple words.

while loops are the same as the "forever (say meow)" in Scratch.  Variables in while loops are declared outside of the loop, which assumes it's going to continue to exist elsewhere in the program.
for loops are basically the same as while loops, but the conditions are all in the parenthesis to the right of "for".  Most people would probably use for loops once comfortable with them.

i is like your counter.  You don't want to use counter, just use i, but it represents the integer of whatever variable you're attempting to loop on.



The goal is to not learn a specific language through this class, but instead that you've learned how to program.
-> unfortunately with a more traditional language, there's more distraction.

Human language is more complex and involves more syntax than computer language.
  However
Computer language requires you to be more precise.  Code ultimately needs to be correct (which goes without saying).

It's hard to become comfortable with the DESIGN of your code.

Integrated Develop Environments (IDEs): aka text editors.
-> these are tools that programmers use to write code (VS Code).

GUI: Graphical User Interface (basically the left side bar of VS code)

CLI: Command Line Interface (terminal) this is what we will mostly be dealing with.
  $ make *filename* = compiling.  You have to do this before the output will be correct.  Compiling is the process of taking in source code and putting out machine code (binary).
  $ ./file (this pulls up any file in your current folder)
  $ rm = remove file (this removes the file named 'file')
  $ ls = list (this lists all the files in your current folder, if you never want to use GUI)

SCRATCH: (hello, world) from scratch is 
C: printf("hello, world"); in C
  -> C must have double quotes, not single

SCRATCH: ask (What's your name) and wait; has an 'answer' bubble that writes in whatever the user inputs to the prompt
C: string answer = get_string("What's your name? ");
           👆🏼 this is the assignment operator, which means to store a value in a variable.  You read these right to left.  The value on the right is copied in to the value on the left.
  -> labeling it 'string' is telling the computer this is words
  -> 'int' would tell the computer this is numbers

\n is a way of creating a new line so the C program compiler doesn't print $... on the end of your program.
  -> / is an escape sequence
  -> n is for a new line

%s is a format code which serves as a placeholder.

arguments and parameters are synonymous: they are inputs to a function.

SCRATCH: when (green flag) clicked
C: 
  #include <stdio.h>  👈🏼 this is the library you've loaded, aka a Header File.  It's a menu of all the available funtions.
  #include <cs50.h>

  int main(void)
  {
    printf("Hello, world\n");
  }

cd : change directory
  cd .. : change to parent folder
  cd ../.. : change to grandparent folder
cp : copy
code filename.c : create a new file
ls : list the items in the directory
mkdir : make directory, aka create a new file
mv : move, or rename
rm : remove 
rmdir : remove directory, aka remove a file
./ : access the folder that's right here in this directory

ctrl-L is the same as 'clear' in terminal.

bool : true/false
char : single character
double : more numbers after the decimal point, something that is more precision
float : real number (something with a decimal point in it)
int : integer (numbers)
long : bigger integer
string : words

CS50 library:  these are asking the user for an input in the terminal.
get_char
get_double
get_float
get_int
get_long
get_string

Format Codes: (placeholders)
%c : char
%f : float or double
%i : integer
%li : long integer
%s : string

Operators:
+ : add
- : subtract
* : multiply
/ : divide 
% : remainder operator 

Variables & Syntactic Sugar (ss):
  -> Syntactic Sugar : makes it easier to write fewer characters, but express your thoughts the same.

  int counter = 0; (scratch: set counter to 0)
  counter = counter + 1; (scratch: change counter by 1)
   -> ss: counter += 1;
    -> further ss: counter++; (can only do this with 1)

First argument in printf HAS TO BE A STRING.

With string, int, flow, char, use a finite number of bits.  With 32 bits you can count pretty high.
  -> 8 bits you can count as high as 256
  -> 32 bits gives you roughly 4 billion, which is the standard for mac and pc.
  -> using Long Integers (long, get_long, %li) gets you 64 bits which is still finite but much larger.

Typically if something is wrapped with parenthesis, it's a function.  There are exceptions:
  -> The word "if" is not a function, it's a programming construct or feature of the C languages that uses parenthesis for a boolean expression (x > y)

const tells the compiler that you can't change a variable.  It's common to capitalize const variables.
  -> Ex: cost int MINE = 2;

If you find yourself copying and pasting code, there's a good chance you're probably doing something wrong.

When asking the OR "||", you have to ask the same question on either side of it.

Single quotes '' are used for single characters in char.  
Double quotes "" are used for strings in str, even if there's only one character in the string but more applicable for entire words or multiple words.

WHILE loops are the same as the "forever (say meow)" in Scratch.  Variables in while loops are declared outside of the loop, which assumes it's going to continue to exist elsewhere in the program.
FOR loops are basically the same as while loops, but the conditions are all in the parenthesis to the right of "for".  Most people would probably use for loops once comfortable with them.
DO WHILE loops are similar to while loops, but it checks the condition last instead of first.
  -> these are good when you want to do something no matter what first, and then check some condition or boolean expression.
  -> they do nothing at first, then run once the set codition has been met
  -> if the "while" condition is satisfied, then the "do" will continue to run.  Once the "while" isn't satisfied, then the program moves on to the next lines of code.

i is like your counter.  You don't want to use counter, just use i, but it represents the integer of whatever variable you're attempting to loop on.

When you create a function, like meow.c, it has to be above the call of the function.  C reads top to bottom.  One workaround is to put the "void meow(void);" above everything else.  This is just for C, other programs will allow you to put your functions in any order.

If you're only declaring a variable to return a value, you don't need the variable and you can simply put "return".

Floating-point imprecision: refers to the inability for computers fundamentally to represent all possible real numbers in languages like C.
  -> if you change from a float to an integer, you'll get zeros because int always wants to give back an integer.  This is known as truncation.

Type Conversion: 

The next time the world might end is 19 January 2038, due to the amount of seconds since the "epoch" or January 1st, 1970, when computers came on to the scene.  
  -> most computers were counting seconds with 32 bits, which gets us roughly 2 billion seconds.  2 billion seconds is going to happen in 2038.
  -> the solution for this is more bits.  We're increasing to 64 bits, so it will be someone else's problem far in to the future.

SHORTS: 

Things that are unique to C.
  -> You typically don't have to declare a variable type (integer, character, word(strings)).  In C you need to specify the data type of every variable we create.
  
  -> Data Types and Variables :
    -> int
      -> the int data type is used for variables that will store integers.
      -> integers always take up 4 bytes of memory (32 bits).  This means the range of values they can store is necesarily limited to 32 bits worth of information.  This essentially means the range of integers we can store is from -2^31 - 2^31-1 (minus one because we have to leave room for zero).
        -> this is about negative 2 billion to positive 2 billion.
      -> unsigned int : 
        -> unsigned is a qualifier.  It modifies the data type slightly.  It can be applied to certain data types (including int), which effectively doubles the positive range of variables of that type, at the cost of disallowing any negative values.  (Approx 0 to 4 billion).
        -> you'll occasionally have use for unsigned variables in CS50.
    
    -> char
      -> The char data type is used for variables that will store single characters.
      -> Characters always take up 1 byte of memore (8 bits).  This means the range of values is limited to 8 bits worth of information.  This means they can only fit values in the range of -2^7 (-128) and 2^7-1 (127)
      -> Thanks to ASCII, we've developed a mapping of characters like A, B, C, etc to numeric values in the positive sides of this range.
        -> "A" maps to the number 65.  "a" is 97.  The character 0 (not the number 0), is 48.

    -> float 
      -> the float data type is used for variables that will store floating-point values, also known as real numbers.
      -> floating point values always take up 4 bytes of memore (32 bits).
      -> it's a little complicated to describe the range of float, but suffice it to say with 32 bits of precision, some of which might be used for an integver part, we are limited in how precise we can be.
      -> what that means, is that if you have a repeating decimal place and a large integer place, you might not be able to be as precise.  That's the limitation of the float.
    
    -> double
      -> like floats, the double data type is used for variables that will store floating-point values, also known as real numbers.
      -> the difference is that doubles are double precision.  They always take up 8 bytes of memory (64 bits).
      -> with an additional 32 bits of precision relative to a float, doubles allow us to specify much more precise real numbers.
      -> maybe we can hav pi to 30 places rather than pi to 7 places (like if we use a float).

    -> void 
      -> this is a type, but NOT a data type.
      -> functions can have a void return type, which just means they don't return a value.
      -> the parameter list of a function can also be void.  It simply means the function takes no parameters.
      -> for now, think of void more as a placeholder for "nothing".  It's more complex than taht, but this should suffice for the better part of the course.
      -> when typing int main(void), it's basically saying that main doesn't take any parameters.  There's no argument that gets passed in to main.  There is a way to pass arguments in to main, but so far what we've seen is main not taking any arguments.

    -> bool <cs50.h>
      -> used for variables that will store a Boolean value.  More precisely, they are capable only of storing one of two values: True and False.
      -> be sure to #include <cs50.h> atop you programs if you wish to usethe bool type.
    
    -> string <cs50.h>
      -> the string data type is used for variables that will store a series of characters, which programmers typically call a string.  These can be short, like a word or phrase, or long like a book.
      -> strings include things such as words, sentences, paragraphs, and the like.
      -> besure to #include <cs50.h> atop your programs if you wish to use this string type.

    -> structs
      -> allow you to group things like a variable and a string in to one unit.
    
    -> typedefs 
      -> "defined types", which allow you to create your own data types.

  -> Creating a variable:
   -> 1st give it a type
    -> 2nd give it a name (and a semi-colon at the end)
    -> Examples:
      int number;  (you've created a variable named "number", and it's capable of holding integer-type values)
      char letter;  (you've created a variable named "letter", and it's capagle of holding single character-type values)
  -> If you wish to create multiple variables of the same type, you specify the type name once, and then list as many variables of that type as you want.
    -> Examples: 
      -> int height, width;
        -> this is the same as putting int height; AND int width; on separate lines.  Same with below.
      -> float sqrt2, sqrt3, pi;
    -> in general, it's good practice to only declare variables when you need them.  This has to do with scope.  It used to be standard to create all your variables at the top, but now it's better practice to create them when you're using them.  Likely because this makes it so someone reading your code can quickly see what it's in reference to.

  -> Using a variable:
    -> Declaring & Assigning: after a variable has been declared, it's no longer necessary to specify that variable's type.  (In fact, doing so has some unintended consequences!)
      int number;  // declaration
      number = 17; // assignment
      char letter;  // declaration
      letter = 'H'; // assignment
    -> Initializing: if you are simlutaneously declaring and setting the value of a variable (sometimes called initializing), you can consolidate htis to one step.
      int number = 17;  // initialization
      char letter = 'H'; // initialization
    
  Operators in C 
  -> Arithmetic Operators: in order to manipulate and work with variables and values in C, we have a number of operators at our disposal
    -> +, -, *, /
      int x = y + 1;
      x = x * 5;

    -> Modulus operator (%), which gives us the remainder when the number on the left of the operator is divided by the number on the right. This is basically the long-division operator, where a remainder is or isn't generated.  if nothing is returned, the remainder equals zero, if not, the remainder is returned.
      int m = 13 % 4  // m is now 1
      
    -> C also provides a shorthand way to apply an arithmetic operator to a single variable.
      x = x * 5;
        👆🏼same👇🏼  (this trick works with all five basica arithmetic operators.)
      x *= 5;
      -> C provides a further shorthand for incrementing or decrementing a variable by 1.
        x++;
        x--;

  -> Boolean Expressions: 
    -> used in C for comparing values.  They evaluate to one of two possible values: True or False.  We can use the result of evaluating a Boolean expression in other programming constructs such as deciding which brand in a conditional to take, or determining whether a loop should continue to run.
    -> sometimes when working with Boolean expressions, we will use variables of type bool, but we don't have to.
    -> in C, EVERY non-zero value is equivalent to TRUE, and zero is FALSE.
    -> two main types of Boolean expressions: logical operators and relational operators.
      -> Logical Operators:
        -> Logical AND (&&) is true if and only if BOTH operands are true, otherwise false.
          true && true = true
          true && false = false
          false && true = false
          false && false = false 
        -> Logical OR (||) is true if and only if AT LEAST ONE operand is true, otherwise false.
          true && true = true
          true && false = true
          false && true = true
          false && false = false
        -> Logical NOT (!) inverts the value of its operand.  Sometimes pronounced as "bang", "exclamation", or "not".
          true = false
          false = true
      -> Relational Operators: these behave as you would expect them to, and appear syntactically similar to how you may recall them from elementary arithmetic.
        -> > < >= <=
          less than (x < y)
          greater than (x > y)
          less than or equal to (x <= y)
          greater than or equal to (x >= y)
        -> Equality and Inequality : be careful!  it's a common mistake to use the assignment operator (=) when you intend to use the equality operator (==).
          Equality ( x == y)
          Inequality (x != y)

  Conditionals
    -> Conditional expressions allow your program to make decisions and take different forks in the road, depending on the values of variables or user input.
    -> C provides a few different ways to implement conditional expressions (also known as branches) in your programs, some of which likely look familiar from Scratch.
    -> Examples:
      if (boolean-expression)
      {

      }
        -> if the boolean-expression evaluates to true, all lines of code between the curly braces will execute in order from top to bottom.
        -> if the boolean-expression evaluates to false, thoes lines of code will not execute.
      
      if (boolean-expression)
      {

      }
      else 
      {

      }
      -> if the boolean-expression evaluates to true, all lines of code between the first set of curly braces will execute in order from top to bottom.
      -> if the boolean-expression evaluates to false, all lines of code between the second set of curly braces will execute in order from top to bottom.
    
    -> You can also create an if, else if, else chain with multiple else ifs in the middle.  As you would expect, each branch in the below chain is mutually exclusive.
      if (boolean-expr1)
      {
        // first branch 
      }
      else if (boolean-expr2)
      {
        // second branch
      }
      else if (boolean-expr3)
      {
        // third branch
      }
      else 
      {
        // fourth branch
      }
    -> it is also possible to create a chain of non-mutually exclusive branches.
    -> in the below example, only the third and fourth branches are mutually exclusive.  The else binds to the nearest if only.
    -> say you satisfify the first and second condition and not the third, the program goes to the first, second, and fourth branch.
    -> the else will bind to the nearest if.
      if (boolean-expr1)
      {
        // first branch 
      }
      if (boolean-expr2)
      {
        // second branch
      }
      if (boolean-expr3)
      {
        // third branch
      }
      else 
      {
        // fourth branch
      }

  -> switch() statement: a conditional statement that permits enumeration of distinct cases, instead of relying on Boolean expressions.  It's important to break; between each case, or you will "fall through" each case (unless that is the desired behavior).
    -> Example:
      int x = GetInt();  // not sure if they meant to put "get_int" here, but both ways generate an error in vscode.
      switch(x)
      {
        case 1:
          printf("One!\n");
          break;
        case 2:
          printf("Two!\n");
          break;
        case 3:
          printf("Three!\n");
          break;
        default:
          printf("Sorry!\n");
          break;
      }

  -> Ternary Operator (?:)
    -> mostly a cute trick, the ternary operator (?:) is useful for writing trivially short conditional branches.  Be familiar with it, but know that you won't need to write it if you don't want to.
    -> these two snippets of code act identically
      int x;
      if (expr)
      {
        x = 5;
      }
      else 
      {
        x = 6;
      } 
      👆🏼 same 👇🏼  // just a slicker way of writing it
      int x = (boolean-expression) ? 5 : 6;  
  
Loops 
  -> loops allow your programs to execute lines of code repeatedly, saving you from needing to copy and paste or otherwise repeat lines of code.
  -> C provides a few different ways to implement loops in your programs, some of which likely look familiar from Scratch.
  -> if you every have a program that's running continuously and will crash the browser, hit CTRL-C and it will stop.
  -> loops are usually interchangeable, but it's good practice to use them specifically for the following:
    -> while loop : use when you want to loop to repeat an unknown number of times, or possible not loop at all.
      -> you might want to use this to run the control flow for a game. You might not know how long the user is going to be playing, but you want to keep doing the same thing (updating the various positions of sprites on the board, keeping things moving at all times).
    -> do-while loop : use when you want a loop to repeat an uknown number of times, but at least once.
      -> a common use case is prompting a user for input.  You might ask them for a positive integer, and if they give you a negative integer then the program will run again until they satisfy the false value of the boolean expression.
    -> for loop : use when you want a loop to repeat a discrete number of times, though you may not know the number at the moment the program is compiled.
      -> maybe you have a program where you prompt the user for a number, and they enter 100.  Then the program runs 100 times.  Or 1000, and then it runs 1000 times.  You don't know what the specific number of times is.


  -> While Loops
    -> infinite loop: the lines of code between the curly braces will execute repeatedly from top to bottom, until and unless we break out of it (as with a break; statement like we use in switch()), or otherwise kill our program.
      while (true)
      {

      }
    -> repeat until (from scratch): if the boolean expression evaluates to true, all lines of code between the curly braces will execute repeatedly, in order from top to bottom, until boolean-expression evaluates to false.
      while (boolean-expression)
      {

      }
  
  -> Do While Loops: this loop will execute all lines of code between the curly braces once, and then, if the boolean-expression evaluates to true, will go back and repeat that process until boolean-expression evaluates to false.
    do
    {

    }
    while (boolean-expression);

  -> For Loops: 
    -> syntactically unattractive, but for loops are used to repeat the body of a loop a specified number of times, in this example 10.  
    -> the process undertaken in a for loop is:
      -> the counter variable(s) (here, i) is set
      -> the Boolean expression is checked.
        -> if it evaluates to true, the body of the loop executes
        -> if it evaluates to false, the body of the loop does not execute.
      -> the counter variable is incremented, and then the boolean expression is checked again, etc.
    -> Example: 
      for (int i = 0; i < 10; i++)
      {

      }
      👆🏼AKA👇🏼
      for (start; expr; increment)
      {

      }
      1. the statement(s) in "start" are executed
      2. the "expr" is checked
        -> if it evaluates to true, the body of the loop executes
        -> if it evaluates to false, the body of the loop does not execute;
      3. the statement(s) in "increment" are executed, and then the "expr" is check again, etc.

Command Line
  GUI (graphical user interface) is utilizing your mouse to navigate your system.
  Using the command line works with UNIX-based systems, it's a way to do the same things you'd do with your mouse but instead with the command line.
  Commands:
    -> ls : "list command", gives you a readout of all the files and folders in your current directory.
    -> cd : "change directory", changes your current directory.  
      -> The shorthand name for the current directory is .
      -> The shorthand name for the parent directory is ..
      -> The shorthand name for the grandparent directory is ../..
      -> If you want to go back to the main directory, type cd and press enter (gets it back to where there's just a $)
    -> pwd : "present working directory", shows you the folders where you're current directory is set to.
    -> mkdir : "make directory", creates a new subdirectory located in the current directory. AKA, it's making a new folder.
    -> cp : "copy", allows you to create a dupliacte of a file
      -> cp <source> <destination> 
        -> you're duplicating the file you specify as <source>, and it will save the file in <destination>
      -> cp -r <source directory> <destination directory>
        -> if you wish to copy ENTIRE directories, use this.  The -r stands for "recursive", and tells cp to dive down into the directory and copy everything inside of it (including any subdirectories it might contain).
    -> rm : "remove", this will delete <file> after it asks you to confirm (y/n) you want to delete it.
      -> rm -f <file> 
        -> skips the file confirmation "forceably"
      -> rm -r <directory>
        -> deletes the entire directory
      -> you can also combine the -r and -f flags in to -reference  
        -> be careful, there's no undoing this!
    -> mv : "move", allows you to effectively rename a file, moving it from <source> to <destination>.
      -> this simplifies the process of duplicating a file that you've named wrongly and instead naming it rightly, then deleting the previous file.  It just renames it right away.
    -> chmod
    -> rmdir
    -> sudo 
    -> ln 
    -> man 
    -> clear 
    -> touch 
    -> diff 
    -> telnet


Lecture 2

  Clang = "C Language", which is the built in compiler utilized in the CS50 vs code program.
    -> clang -o hello hello.c
      -> creates a file called "a.out" for programs that don't require an additional library
    -> this becomes tedious, because you have to type "clang hello.c -o hello -lcs50" to utilize the cs50 library 
    -> "make" makes all this happen, this is just an explanation of what's happening
    -> when you input "make hello", the program is called make, and the command line argument is hello (argument is what you pass in to the program).

  Compiling is an oversimplification.  4 things are happening:
    -> Preprocessing
      -> these are the #include directives, called Preprocessor Directives, that we add at the top of C programs.
      -> they're handled specially apart from the rest of your code.  The libararies are accessing these programs for functions we input:
        -> get_string : string get_string(string prompt);
        -> printf : int printf(string format, ...);
    -> Compiling
      -> to take code that looks like human syntax and convert it to assembly language.  There are many different types of (or flavors of) assembly language.
      -> assembly language is about as low level as you can get to what a computer really understands before you start getting in to 0s and 1s.
    -> Assembling
    -> Linking

  Arrays
    -> 


Things that are new in 2023 (I missed some of them)

The most numbers you can represent with 32 bits: 4,294,967,295
  > typically half of these are negative, so the highest and lowest actual numbers most computers use is: 2,147,483,647 and -2,147,483,648 (remember that 0 counts here, that's why positive and negative are different).
  > once you run out, you've experienced Integer Overflow
The most numbers you can represent with 64 bits: 9,223,372,036,854,775,807 (9 Quintillion)

Truncation: lose everything after the decimal point due to floating-point division errors.

TypeCasting: convert one data type to another by explicitly telling the compiler that you want to do so.

Magic Numbers: directly writing constants in to our code.  Essentially hard coding?
  -> C provides a preprocessor directive (also called a macro) for creating symbolic constants.
    #define NAME REPLACEMENT
      -> At the time your program is compiled, #define goes through your code and replaces NAME with REPLACEMENT
      -> DON'T put a semi-colon at the end of this.
      -> If #include is similar to copy/paste, then #define is analogous to find/replace.
    #define PI 3.14159265
      -> At the time your program is compiled, #define goes through your code and replaces PI with 3.14159265.
    #define COURSE "CS50"
      -> #define goes through your code and replaces COURSE with "CS50".
    -> Example:
    #define DECKSIZE 52

    card deal_cards(deck name)
    {
      for (int i = 0; i < DECKSIZE; i++)
      {
        // deal the card
      }
    }

    Holy moly credit is a doozey.

    I've got to create a function somewhere.  I just don't know where quite yet.